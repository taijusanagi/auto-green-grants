/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type MetadataStruct = {
  protocol: PromiseOrValue<BigNumberish>;
  pointer: PromiseOrValue<string>;
};

export type MetadataStructOutput = [BigNumber, string] & {
  protocol: BigNumber;
  pointer: string;
};

export declare namespace DirectGrantsSimpleStrategy {
  export type MilestoneStruct = {
    amountPercentage: PromiseOrValue<BigNumberish>;
    metadata: MetadataStruct;
    milestoneStatus: PromiseOrValue<BigNumberish>;
  };

  export type MilestoneStructOutput = [
    BigNumber,
    MetadataStructOutput,
    number
  ] & {
    amountPercentage: BigNumber;
    metadata: MetadataStructOutput;
    milestoneStatus: number;
  };

  export type RecipientStruct = {
    useRegistryAnchor: PromiseOrValue<boolean>;
    recipientAddress: PromiseOrValue<string>;
    grantAmount: PromiseOrValue<BigNumberish>;
    metadata: MetadataStruct;
    recipientStatus: PromiseOrValue<BigNumberish>;
    milestonesReviewStatus: PromiseOrValue<BigNumberish>;
  };

  export type RecipientStructOutput = [
    boolean,
    string,
    BigNumber,
    MetadataStructOutput,
    number,
    number
  ] & {
    useRegistryAnchor: boolean;
    recipientAddress: string;
    grantAmount: BigNumber;
    metadata: MetadataStructOutput;
    recipientStatus: number;
    milestonesReviewStatus: number;
  };
}

export declare namespace IStrategy {
  export type PayoutSummaryStruct = {
    recipientAddress: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type PayoutSummaryStructOutput = [string, BigNumber] & {
    recipientAddress: string;
    amount: BigNumber;
  };
}

export interface DirectGrantsSimpleStrategyInterface extends utils.Interface {
  functions: {
    "NATIVE()": FunctionFragment;
    "allocate(bytes,address)": FunctionFragment;
    "allocatedGrantAmount()": FunctionFragment;
    "distribute(address[],bytes,address)": FunctionFragment;
    "getAllo()": FunctionFragment;
    "getInternalRecipientStatus(address)": FunctionFragment;
    "getMilestoneStatus(address,uint256)": FunctionFragment;
    "getMilestones(address)": FunctionFragment;
    "getPayouts(address[],bytes[])": FunctionFragment;
    "getPoolAmount()": FunctionFragment;
    "getPoolId()": FunctionFragment;
    "getRecipient(address)": FunctionFragment;
    "getRecipientStatus(address)": FunctionFragment;
    "getStrategyId()": FunctionFragment;
    "grantAmountRequired()": FunctionFragment;
    "increasePoolAmount(uint256)": FunctionFragment;
    "initialize(uint256,bytes)": FunctionFragment;
    "isPoolActive()": FunctionFragment;
    "isValidAllocator(address)": FunctionFragment;
    "metadataRequired()": FunctionFragment;
    "milestones(address,uint256)": FunctionFragment;
    "registerRecipient(bytes,address)": FunctionFragment;
    "registryGating()": FunctionFragment;
    "rejectMilestone(address,uint256)": FunctionFragment;
    "reviewSetMilestones(address,uint8)": FunctionFragment;
    "setInternalRecipientStatusToInReview(address[])": FunctionFragment;
    "setMilestones(address,(uint256,(uint256,string),uint8)[])": FunctionFragment;
    "setPoolActive(bool)": FunctionFragment;
    "submitMilestone(address,uint256,(uint256,string))": FunctionFragment;
    "upcomingMilestone(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NATIVE"
      | "allocate"
      | "allocatedGrantAmount"
      | "distribute"
      | "getAllo"
      | "getInternalRecipientStatus"
      | "getMilestoneStatus"
      | "getMilestones"
      | "getPayouts"
      | "getPoolAmount"
      | "getPoolId"
      | "getRecipient"
      | "getRecipientStatus"
      | "getStrategyId"
      | "grantAmountRequired"
      | "increasePoolAmount"
      | "initialize"
      | "isPoolActive"
      | "isValidAllocator"
      | "metadataRequired"
      | "milestones"
      | "registerRecipient"
      | "registryGating"
      | "rejectMilestone"
      | "reviewSetMilestones"
      | "setInternalRecipientStatusToInReview"
      | "setMilestones"
      | "setPoolActive"
      | "submitMilestone"
      | "upcomingMilestone"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "NATIVE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allocate",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allocatedGrantAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "getAllo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInternalRecipientStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMilestoneStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMilestones",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayouts",
    values: [PromiseOrValue<string>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPoolId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecipientStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantAmountRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePoolAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidAllocator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "metadataRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "milestones",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRecipient",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registryGating",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rejectMilestone",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewSetMilestones",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInternalRecipientStatusToInReview",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMilestones",
    values: [
      PromiseOrValue<string>,
      DirectGrantsSimpleStrategy.MilestoneStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolActive",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitMilestone",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      MetadataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upcomingMilestone",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "NATIVE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allocatedGrantAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAllo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInternalRecipientStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMilestoneStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMilestones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayouts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecipientStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAmountRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePoolAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPoolActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidAllocator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "milestones", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registryGating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewSetMilestones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInternalRecipientStatusToInReview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMilestones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upcomingMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Allocated(address,uint256,address,address)": EventFragment;
    "Distributed(address,address,uint256,address)": EventFragment;
    "Initialized(address,bytes32,uint256,bytes)": EventFragment;
    "MilestoneStatusChanged(address,uint256,uint8)": EventFragment;
    "MilestoneSubmitted(address,uint256,tuple)": EventFragment;
    "MilestonesReviewed(address,uint8)": EventFragment;
    "MilestonesSet(address)": EventFragment;
    "PoolActive(bool)": EventFragment;
    "RecipientStatusChanged(address,uint8)": EventFragment;
    "Registered(address,bytes,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Allocated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Distributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MilestoneStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MilestoneSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MilestonesReviewed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MilestonesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolActive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecipientStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Registered"): EventFragment;
}

export interface AllocatedEventObject {
  recipientId: string;
  amount: BigNumber;
  token: string;
  sender: string;
}
export type AllocatedEvent = TypedEvent<
  [string, BigNumber, string, string],
  AllocatedEventObject
>;

export type AllocatedEventFilter = TypedEventFilter<AllocatedEvent>;

export interface DistributedEventObject {
  recipientId: string;
  recipientAddress: string;
  amount: BigNumber;
  sender: string;
}
export type DistributedEvent = TypedEvent<
  [string, string, BigNumber, string],
  DistributedEventObject
>;

export type DistributedEventFilter = TypedEventFilter<DistributedEvent>;

export interface InitializedEventObject {
  allo: string;
  profileId: string;
  poolId: BigNumber;
  data: string;
}
export type InitializedEvent = TypedEvent<
  [string, string, BigNumber, string],
  InitializedEventObject
>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MilestoneStatusChangedEventObject {
  recipientId: string;
  milestoneId: BigNumber;
  status: number;
}
export type MilestoneStatusChangedEvent = TypedEvent<
  [string, BigNumber, number],
  MilestoneStatusChangedEventObject
>;

export type MilestoneStatusChangedEventFilter =
  TypedEventFilter<MilestoneStatusChangedEvent>;

export interface MilestoneSubmittedEventObject {
  recipientId: string;
  milestoneId: BigNumber;
  metadata: MetadataStructOutput;
}
export type MilestoneSubmittedEvent = TypedEvent<
  [string, BigNumber, MetadataStructOutput],
  MilestoneSubmittedEventObject
>;

export type MilestoneSubmittedEventFilter =
  TypedEventFilter<MilestoneSubmittedEvent>;

export interface MilestonesReviewedEventObject {
  recipientId: string;
  status: number;
}
export type MilestonesReviewedEvent = TypedEvent<
  [string, number],
  MilestonesReviewedEventObject
>;

export type MilestonesReviewedEventFilter =
  TypedEventFilter<MilestonesReviewedEvent>;

export interface MilestonesSetEventObject {
  recipientId: string;
}
export type MilestonesSetEvent = TypedEvent<[string], MilestonesSetEventObject>;

export type MilestonesSetEventFilter = TypedEventFilter<MilestonesSetEvent>;

export interface PoolActiveEventObject {
  active: boolean;
}
export type PoolActiveEvent = TypedEvent<[boolean], PoolActiveEventObject>;

export type PoolActiveEventFilter = TypedEventFilter<PoolActiveEvent>;

export interface RecipientStatusChangedEventObject {
  recipientId: string;
  status: number;
}
export type RecipientStatusChangedEvent = TypedEvent<
  [string, number],
  RecipientStatusChangedEventObject
>;

export type RecipientStatusChangedEventFilter =
  TypedEventFilter<RecipientStatusChangedEvent>;

export interface RegisteredEventObject {
  recipientId: string;
  data: string;
  sender: string;
}
export type RegisteredEvent = TypedEvent<
  [string, string, string],
  RegisteredEventObject
>;

export type RegisteredEventFilter = TypedEventFilter<RegisteredEvent>;

export interface DirectGrantsSimpleStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DirectGrantsSimpleStrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NATIVE(overrides?: CallOverrides): Promise<[string]>;

    allocate(
      _data: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allocatedGrantAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    distribute(
      _recipientIds: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllo(overrides?: CallOverrides): Promise<[string]>;

    getInternalRecipientStatus(
      _recipientId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getMilestoneStatus(
      _recipientId: PromiseOrValue<string>,
      _milestoneId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getMilestones(
      _recipientId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[DirectGrantsSimpleStrategy.MilestoneStructOutput[]]>;

    getPayouts(
      _recipientIds: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[IStrategy.PayoutSummaryStructOutput[]]>;

    getPoolAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRecipient(
      _recipientId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[DirectGrantsSimpleStrategy.RecipientStructOutput]>;

    getRecipientStatus(
      _recipientId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getStrategyId(overrides?: CallOverrides): Promise<[string]>;

    grantAmountRequired(overrides?: CallOverrides): Promise<[boolean]>;

    increasePoolAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _poolId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isPoolActive(overrides?: CallOverrides): Promise<[boolean]>;

    isValidAllocator(
      _allocator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    metadataRequired(overrides?: CallOverrides): Promise<[boolean]>;

    milestones(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, MetadataStructOutput, number] & {
        amountPercentage: BigNumber;
        metadata: MetadataStructOutput;
        milestoneStatus: number;
      }
    >;

    registerRecipient(
      _data: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registryGating(overrides?: CallOverrides): Promise<[boolean]>;

    rejectMilestone(
      _recipientId: PromiseOrValue<string>,
      _milestoneId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reviewSetMilestones(
      _recipientId: PromiseOrValue<string>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInternalRecipientStatusToInReview(
      _recipientIds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMilestones(
      _recipientId: PromiseOrValue<string>,
      _milestones: DirectGrantsSimpleStrategy.MilestoneStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolActive(
      _flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitMilestone(
      _recipientId: PromiseOrValue<string>,
      _milestoneId: PromiseOrValue<BigNumberish>,
      _metadata: MetadataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upcomingMilestone(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  NATIVE(overrides?: CallOverrides): Promise<string>;

  allocate(
    _data: PromiseOrValue<BytesLike>,
    _sender: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allocatedGrantAmount(overrides?: CallOverrides): Promise<BigNumber>;

  distribute(
    _recipientIds: PromiseOrValue<string>[],
    _data: PromiseOrValue<BytesLike>,
    _sender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllo(overrides?: CallOverrides): Promise<string>;

  getInternalRecipientStatus(
    _recipientId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getMilestoneStatus(
    _recipientId: PromiseOrValue<string>,
    _milestoneId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getMilestones(
    _recipientId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<DirectGrantsSimpleStrategy.MilestoneStructOutput[]>;

  getPayouts(
    _recipientIds: PromiseOrValue<string>[],
    _data: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<IStrategy.PayoutSummaryStructOutput[]>;

  getPoolAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getPoolId(overrides?: CallOverrides): Promise<BigNumber>;

  getRecipient(
    _recipientId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<DirectGrantsSimpleStrategy.RecipientStructOutput>;

  getRecipientStatus(
    _recipientId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getStrategyId(overrides?: CallOverrides): Promise<string>;

  grantAmountRequired(overrides?: CallOverrides): Promise<boolean>;

  increasePoolAmount(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _poolId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isPoolActive(overrides?: CallOverrides): Promise<boolean>;

  isValidAllocator(
    _allocator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  metadataRequired(overrides?: CallOverrides): Promise<boolean>;

  milestones(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, MetadataStructOutput, number] & {
      amountPercentage: BigNumber;
      metadata: MetadataStructOutput;
      milestoneStatus: number;
    }
  >;

  registerRecipient(
    _data: PromiseOrValue<BytesLike>,
    _sender: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registryGating(overrides?: CallOverrides): Promise<boolean>;

  rejectMilestone(
    _recipientId: PromiseOrValue<string>,
    _milestoneId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reviewSetMilestones(
    _recipientId: PromiseOrValue<string>,
    _status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInternalRecipientStatusToInReview(
    _recipientIds: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMilestones(
    _recipientId: PromiseOrValue<string>,
    _milestones: DirectGrantsSimpleStrategy.MilestoneStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolActive(
    _flag: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitMilestone(
    _recipientId: PromiseOrValue<string>,
    _milestoneId: PromiseOrValue<BigNumberish>,
    _metadata: MetadataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upcomingMilestone(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NATIVE(overrides?: CallOverrides): Promise<string>;

    allocate(
      _data: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    allocatedGrantAmount(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(
      _recipientIds: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllo(overrides?: CallOverrides): Promise<string>;

    getInternalRecipientStatus(
      _recipientId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getMilestoneStatus(
      _recipientId: PromiseOrValue<string>,
      _milestoneId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getMilestones(
      _recipientId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<DirectGrantsSimpleStrategy.MilestoneStructOutput[]>;

    getPayouts(
      _recipientIds: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<IStrategy.PayoutSummaryStructOutput[]>;

    getPoolAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolId(overrides?: CallOverrides): Promise<BigNumber>;

    getRecipient(
      _recipientId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<DirectGrantsSimpleStrategy.RecipientStructOutput>;

    getRecipientStatus(
      _recipientId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getStrategyId(overrides?: CallOverrides): Promise<string>;

    grantAmountRequired(overrides?: CallOverrides): Promise<boolean>;

    increasePoolAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _poolId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    isPoolActive(overrides?: CallOverrides): Promise<boolean>;

    isValidAllocator(
      _allocator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    metadataRequired(overrides?: CallOverrides): Promise<boolean>;

    milestones(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, MetadataStructOutput, number] & {
        amountPercentage: BigNumber;
        metadata: MetadataStructOutput;
        milestoneStatus: number;
      }
    >;

    registerRecipient(
      _data: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    registryGating(overrides?: CallOverrides): Promise<boolean>;

    rejectMilestone(
      _recipientId: PromiseOrValue<string>,
      _milestoneId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    reviewSetMilestones(
      _recipientId: PromiseOrValue<string>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInternalRecipientStatusToInReview(
      _recipientIds: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMilestones(
      _recipientId: PromiseOrValue<string>,
      _milestones: DirectGrantsSimpleStrategy.MilestoneStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolActive(
      _flag: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitMilestone(
      _recipientId: PromiseOrValue<string>,
      _milestoneId: PromiseOrValue<BigNumberish>,
      _metadata: MetadataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    upcomingMilestone(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Allocated(address,uint256,address,address)"(
      recipientId?: PromiseOrValue<string> | null,
      amount?: null,
      token?: null,
      sender?: null
    ): AllocatedEventFilter;
    Allocated(
      recipientId?: PromiseOrValue<string> | null,
      amount?: null,
      token?: null,
      sender?: null
    ): AllocatedEventFilter;

    "Distributed(address,address,uint256,address)"(
      recipientId?: PromiseOrValue<string> | null,
      recipientAddress?: null,
      amount?: null,
      sender?: null
    ): DistributedEventFilter;
    Distributed(
      recipientId?: PromiseOrValue<string> | null,
      recipientAddress?: null,
      amount?: null,
      sender?: null
    ): DistributedEventFilter;

    "Initialized(address,bytes32,uint256,bytes)"(
      allo?: null,
      profileId?: null,
      poolId?: null,
      data?: null
    ): InitializedEventFilter;
    Initialized(
      allo?: null,
      profileId?: null,
      poolId?: null,
      data?: null
    ): InitializedEventFilter;

    "MilestoneStatusChanged(address,uint256,uint8)"(
      recipientId?: null,
      milestoneId?: null,
      status?: null
    ): MilestoneStatusChangedEventFilter;
    MilestoneStatusChanged(
      recipientId?: null,
      milestoneId?: null,
      status?: null
    ): MilestoneStatusChangedEventFilter;

    "MilestoneSubmitted(address,uint256,tuple)"(
      recipientId?: null,
      milestoneId?: null,
      metadata?: null
    ): MilestoneSubmittedEventFilter;
    MilestoneSubmitted(
      recipientId?: null,
      milestoneId?: null,
      metadata?: null
    ): MilestoneSubmittedEventFilter;

    "MilestonesReviewed(address,uint8)"(
      recipientId?: null,
      status?: null
    ): MilestonesReviewedEventFilter;
    MilestonesReviewed(
      recipientId?: null,
      status?: null
    ): MilestonesReviewedEventFilter;

    "MilestonesSet(address)"(recipientId?: null): MilestonesSetEventFilter;
    MilestonesSet(recipientId?: null): MilestonesSetEventFilter;

    "PoolActive(bool)"(active?: null): PoolActiveEventFilter;
    PoolActive(active?: null): PoolActiveEventFilter;

    "RecipientStatusChanged(address,uint8)"(
      recipientId?: null,
      status?: null
    ): RecipientStatusChangedEventFilter;
    RecipientStatusChanged(
      recipientId?: null,
      status?: null
    ): RecipientStatusChangedEventFilter;

    "Registered(address,bytes,address)"(
      recipientId?: PromiseOrValue<string> | null,
      data?: null,
      sender?: null
    ): RegisteredEventFilter;
    Registered(
      recipientId?: PromiseOrValue<string> | null,
      data?: null,
      sender?: null
    ): RegisteredEventFilter;
  };

  estimateGas: {
    NATIVE(overrides?: CallOverrides): Promise<BigNumber>;

    allocate(
      _data: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allocatedGrantAmount(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(
      _recipientIds: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllo(overrides?: CallOverrides): Promise<BigNumber>;

    getInternalRecipientStatus(
      _recipientId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMilestoneStatus(
      _recipientId: PromiseOrValue<string>,
      _milestoneId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMilestones(
      _recipientId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayouts(
      _recipientIds: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolId(overrides?: CallOverrides): Promise<BigNumber>;

    getRecipient(
      _recipientId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecipientStatus(
      _recipientId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStrategyId(overrides?: CallOverrides): Promise<BigNumber>;

    grantAmountRequired(overrides?: CallOverrides): Promise<BigNumber>;

    increasePoolAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _poolId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isPoolActive(overrides?: CallOverrides): Promise<BigNumber>;

    isValidAllocator(
      _allocator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metadataRequired(overrides?: CallOverrides): Promise<BigNumber>;

    milestones(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerRecipient(
      _data: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registryGating(overrides?: CallOverrides): Promise<BigNumber>;

    rejectMilestone(
      _recipientId: PromiseOrValue<string>,
      _milestoneId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reviewSetMilestones(
      _recipientId: PromiseOrValue<string>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInternalRecipientStatusToInReview(
      _recipientIds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMilestones(
      _recipientId: PromiseOrValue<string>,
      _milestones: DirectGrantsSimpleStrategy.MilestoneStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolActive(
      _flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitMilestone(
      _recipientId: PromiseOrValue<string>,
      _milestoneId: PromiseOrValue<BigNumberish>,
      _metadata: MetadataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upcomingMilestone(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NATIVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allocate(
      _data: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allocatedGrantAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distribute(
      _recipientIds: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInternalRecipientStatus(
      _recipientId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMilestoneStatus(
      _recipientId: PromiseOrValue<string>,
      _milestoneId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMilestones(
      _recipientId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayouts(
      _recipientIds: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRecipient(
      _recipientId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecipientStatus(
      _recipientId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStrategyId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantAmountRequired(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePoolAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _poolId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isPoolActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidAllocator(
      _allocator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metadataRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    milestones(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerRecipient(
      _data: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registryGating(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rejectMilestone(
      _recipientId: PromiseOrValue<string>,
      _milestoneId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reviewSetMilestones(
      _recipientId: PromiseOrValue<string>,
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInternalRecipientStatusToInReview(
      _recipientIds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMilestones(
      _recipientId: PromiseOrValue<string>,
      _milestones: DirectGrantsSimpleStrategy.MilestoneStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolActive(
      _flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitMilestone(
      _recipientId: PromiseOrValue<string>,
      _milestoneId: PromiseOrValue<BigNumberish>,
      _metadata: MetadataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upcomingMilestone(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
