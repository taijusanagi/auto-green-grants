/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../../common";

export type MetadataStruct = {
  protocol: PromiseOrValue<BigNumberish>;
  pointer: PromiseOrValue<string>;
};

export type MetadataStructOutput = [BigNumber, string] & {
  protocol: BigNumber;
  pointer: string;
};

export declare namespace IAllo {
  export type PoolStruct = {
    profileId: PromiseOrValue<BytesLike>;
    strategy: PromiseOrValue<string>;
    token: PromiseOrValue<string>;
    metadata: MetadataStruct;
    managerRole: PromiseOrValue<BytesLike>;
    adminRole: PromiseOrValue<BytesLike>;
  };

  export type PoolStructOutput = [string, string, string, MetadataStructOutput, string, string] & {
    profileId: string;
    strategy: string;
    token: string;
    metadata: MetadataStructOutput;
    managerRole: string;
    adminRole: string;
  };
}

export interface AlloInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "NATIVE()": FunctionFragment;
    "addPoolManager(uint256,address)": FunctionFragment;
    "addToCloneableStrategies(address)": FunctionFragment;
    "allocate(uint256,bytes)": FunctionFragment;
    "batchAllocate(uint256[],bytes[])": FunctionFragment;
    "batchRegisterRecipient(uint256[],bytes[])": FunctionFragment;
    "cancelOwnershipHandover()": FunctionFragment;
    "completeOwnershipHandover(address)": FunctionFragment;
    "createPool(bytes32,address,bytes,address,uint256,(uint256,string),address[])": FunctionFragment;
    "createPoolWithCustomStrategy(bytes32,address,bytes,address,uint256,(uint256,string),address[])": FunctionFragment;
    "distribute(uint256,address[],bytes)": FunctionFragment;
    "fundPool(uint256,uint256)": FunctionFragment;
    "getBaseFee()": FunctionFragment;
    "getFeeDenominator()": FunctionFragment;
    "getPercentFee()": FunctionFragment;
    "getPool(uint256)": FunctionFragment;
    "getRegistry()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getStrategy(uint256)": FunctionFragment;
    "getTreasury()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,uint256,uint256)": FunctionFragment;
    "isCloneableStrategy(address)": FunctionFragment;
    "isPoolAdmin(uint256,address)": FunctionFragment;
    "isPoolManager(uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownershipHandoverExpiresAt(address)": FunctionFragment;
    "recoverFunds(address,address)": FunctionFragment;
    "registerRecipient(uint256,bytes)": FunctionFragment;
    "removeFromCloneableStrategies(address)": FunctionFragment;
    "removePoolManager(uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "requestOwnershipHandover()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateBaseFee(uint256)": FunctionFragment;
    "updatePercentFee(uint256)": FunctionFragment;
    "updatePoolMetadata(uint256,(uint256,string))": FunctionFragment;
    "updateRegistry(address)": FunctionFragment;
    "updateTreasury(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "NATIVE"
      | "addPoolManager"
      | "addToCloneableStrategies"
      | "allocate"
      | "batchAllocate"
      | "batchRegisterRecipient"
      | "cancelOwnershipHandover"
      | "completeOwnershipHandover"
      | "createPool"
      | "createPoolWithCustomStrategy"
      | "distribute"
      | "fundPool"
      | "getBaseFee"
      | "getFeeDenominator"
      | "getPercentFee"
      | "getPool"
      | "getRegistry"
      | "getRoleAdmin"
      | "getStrategy"
      | "getTreasury"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isCloneableStrategy"
      | "isPoolAdmin"
      | "isPoolManager"
      | "owner"
      | "ownershipHandoverExpiresAt"
      | "recoverFunds"
      | "registerRecipient"
      | "removeFromCloneableStrategies"
      | "removePoolManager"
      | "renounceOwnership"
      | "renounceRole"
      | "requestOwnershipHandover"
      | "revokeRole"
      | "supportsInterface"
      | "transferOwnership"
      | "updateBaseFee"
      | "updatePercentFee"
      | "updatePoolMetadata"
      | "updateRegistry"
      | "updateTreasury",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "NATIVE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addPoolManager",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "addToCloneableStrategies", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "allocate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: "batchAllocate",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BytesLike>[]],
  ): string;
  encodeFunctionData(
    functionFragment: "batchRegisterRecipient",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BytesLike>[]],
  ): string;
  encodeFunctionData(functionFragment: "cancelOwnershipHandover", values?: undefined): string;
  encodeFunctionData(functionFragment: "completeOwnershipHandover", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      MetadataStruct,
      PromiseOrValue<string>[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "createPoolWithCustomStrategy",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      MetadataStruct,
      PromiseOrValue<string>[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[], PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: "fundPool",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: "getBaseFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "getFeeDenominator", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPercentFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPool", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "getRegistry", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: "getStrategy", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "getTreasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "hasRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: "isCloneableStrategy", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "isPoolAdmin",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolManager",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "ownershipHandoverExpiresAt", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "recoverFunds",
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "registerRecipient",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: "removeFromCloneableStrategies", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "removePoolManager",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "requestOwnershipHandover", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "updateBaseFee", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: "updatePercentFee", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "updatePoolMetadata",
    values: [PromiseOrValue<BigNumberish>, MetadataStruct],
  ): string;
  encodeFunctionData(functionFragment: "updateRegistry", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "updateTreasury", values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NATIVE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPoolManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addToCloneableStrategies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchAllocate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchRegisterRecipient", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelOwnershipHandover", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "completeOwnershipHandover", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPoolWithCustomStrategy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fundPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBaseFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFeeDenominator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPercentFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRegistry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStrategy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTreasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isCloneableStrategy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPoolAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPoolManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownershipHandoverExpiresAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recoverFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registerRecipient", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeFromCloneableStrategies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removePoolManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "requestOwnershipHandover", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateBaseFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updatePercentFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updatePoolMetadata", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateRegistry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateTreasury", data: BytesLike): Result;

  events: {
    "BaseFeePaid(uint256,uint256)": EventFragment;
    "BaseFeeUpdated(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipHandoverCanceled(address)": EventFragment;
    "OwnershipHandoverRequested(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PercentFeeUpdated(uint256)": EventFragment;
    "PoolCreated(uint256,bytes32,address,address,uint256,tuple)": EventFragment;
    "PoolFunded(uint256,uint256,uint256)": EventFragment;
    "PoolMetadataUpdated(uint256,tuple)": EventFragment;
    "RegistryUpdated(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "StrategyApproved(address)": EventFragment;
    "StrategyRemoved(address)": EventFragment;
    "TreasuryUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaseFeePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PercentFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolMetadataUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryUpdated"): EventFragment;
}

export interface BaseFeePaidEventObject {
  poolId: BigNumber;
  amount: BigNumber;
}
export type BaseFeePaidEvent = TypedEvent<[BigNumber, BigNumber], BaseFeePaidEventObject>;

export type BaseFeePaidEventFilter = TypedEventFilter<BaseFeePaidEvent>;

export interface BaseFeeUpdatedEventObject {
  baseFee: BigNumber;
}
export type BaseFeeUpdatedEvent = TypedEvent<[BigNumber], BaseFeeUpdatedEventObject>;

export type BaseFeeUpdatedEventFilter = TypedEventFilter<BaseFeeUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipHandoverCanceledEventObject {
  pendingOwner: string;
}
export type OwnershipHandoverCanceledEvent = TypedEvent<[string], OwnershipHandoverCanceledEventObject>;

export type OwnershipHandoverCanceledEventFilter = TypedEventFilter<OwnershipHandoverCanceledEvent>;

export interface OwnershipHandoverRequestedEventObject {
  pendingOwner: string;
}
export type OwnershipHandoverRequestedEvent = TypedEvent<[string], OwnershipHandoverRequestedEventObject>;

export type OwnershipHandoverRequestedEventFilter = TypedEventFilter<OwnershipHandoverRequestedEvent>;

export interface OwnershipTransferredEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PercentFeeUpdatedEventObject {
  percentFee: BigNumber;
}
export type PercentFeeUpdatedEvent = TypedEvent<[BigNumber], PercentFeeUpdatedEventObject>;

export type PercentFeeUpdatedEventFilter = TypedEventFilter<PercentFeeUpdatedEvent>;

export interface PoolCreatedEventObject {
  poolId: BigNumber;
  profileId: string;
  strategy: string;
  token: string;
  amount: BigNumber;
  metadata: MetadataStructOutput;
}
export type PoolCreatedEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, MetadataStructOutput],
  PoolCreatedEventObject
>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export interface PoolFundedEventObject {
  poolId: BigNumber;
  amount: BigNumber;
  fee: BigNumber;
}
export type PoolFundedEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], PoolFundedEventObject>;

export type PoolFundedEventFilter = TypedEventFilter<PoolFundedEvent>;

export interface PoolMetadataUpdatedEventObject {
  poolId: BigNumber;
  metadata: MetadataStructOutput;
}
export type PoolMetadataUpdatedEvent = TypedEvent<[BigNumber, MetadataStructOutput], PoolMetadataUpdatedEventObject>;

export type PoolMetadataUpdatedEventFilter = TypedEventFilter<PoolMetadataUpdatedEvent>;

export interface RegistryUpdatedEventObject {
  registry: string;
}
export type RegistryUpdatedEvent = TypedEvent<[string], RegistryUpdatedEventObject>;

export type RegistryUpdatedEventFilter = TypedEventFilter<RegistryUpdatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface StrategyApprovedEventObject {
  strategy: string;
}
export type StrategyApprovedEvent = TypedEvent<[string], StrategyApprovedEventObject>;

export type StrategyApprovedEventFilter = TypedEventFilter<StrategyApprovedEvent>;

export interface StrategyRemovedEventObject {
  strategy: string;
}
export type StrategyRemovedEvent = TypedEvent<[string], StrategyRemovedEventObject>;

export type StrategyRemovedEventFilter = TypedEventFilter<StrategyRemovedEvent>;

export interface TreasuryUpdatedEventObject {
  treasury: string;
}
export type TreasuryUpdatedEvent = TypedEvent<[string], TreasuryUpdatedEventObject>;

export type TreasuryUpdatedEventFilter = TypedEventFilter<TreasuryUpdatedEvent>;

export interface Allo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AlloInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    NATIVE(overrides?: CallOverrides): Promise<[string]>;

    addPoolManager(
      _poolId: PromiseOrValue<BigNumberish>,
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addToCloneableStrategies(
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    allocate(
      _poolId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    batchAllocate(
      _poolIds: PromiseOrValue<BigNumberish>[],
      _datas: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    batchRegisterRecipient(
      _poolIds: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createPool(
      _profileId: PromiseOrValue<BytesLike>,
      _strategy: PromiseOrValue<string>,
      _initStrategyData: PromiseOrValue<BytesLike>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _metadata: MetadataStruct,
      _managers: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createPoolWithCustomStrategy(
      _profileId: PromiseOrValue<BytesLike>,
      _strategy: PromiseOrValue<string>,
      _initStrategyData: PromiseOrValue<BytesLike>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _metadata: MetadataStruct,
      _managers: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    distribute(
      _poolId: PromiseOrValue<BigNumberish>,
      _recipientIds: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    fundPool(
      _poolId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getBaseFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFeeDenominator(overrides?: CallOverrides): Promise<[BigNumber] & { FEE_DENOMINATOR: BigNumber }>;

    getPercentFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPool(_poolId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[IAllo.PoolStructOutput]>;

    getRegistry(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    getStrategy(_poolId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    getTreasury(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    initialize(
      _registry: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _percentFee: PromiseOrValue<BigNumberish>,
      _baseFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isCloneableStrategy(_strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isPoolAdmin(
      _poolId: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isPoolManager(
      _poolId: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string] & { result: string }>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { result: BigNumber }>;

    recoverFunds(
      _token: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    registerRecipient(
      _poolId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeFromCloneableStrategies(
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removePoolManager(
      _poolId: PromiseOrValue<BigNumberish>,
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateBaseFee(
      _baseFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updatePercentFee(
      _percentFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updatePoolMetadata(
      _poolId: PromiseOrValue<BigNumberish>,
      _metadata: MetadataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateRegistry(
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  NATIVE(overrides?: CallOverrides): Promise<string>;

  addPoolManager(
    _poolId: PromiseOrValue<BigNumberish>,
    _manager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addToCloneableStrategies(
    _strategy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  allocate(
    _poolId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  batchAllocate(
    _poolIds: PromiseOrValue<BigNumberish>[],
    _datas: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  batchRegisterRecipient(
    _poolIds: PromiseOrValue<BigNumberish>[],
    _data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  cancelOwnershipHandover(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  completeOwnershipHandover(
    pendingOwner: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createPool(
    _profileId: PromiseOrValue<BytesLike>,
    _strategy: PromiseOrValue<string>,
    _initStrategyData: PromiseOrValue<BytesLike>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _metadata: MetadataStruct,
    _managers: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createPoolWithCustomStrategy(
    _profileId: PromiseOrValue<BytesLike>,
    _strategy: PromiseOrValue<string>,
    _initStrategyData: PromiseOrValue<BytesLike>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _metadata: MetadataStruct,
    _managers: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  distribute(
    _poolId: PromiseOrValue<BigNumberish>,
    _recipientIds: PromiseOrValue<string>[],
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  fundPool(
    _poolId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getBaseFee(overrides?: CallOverrides): Promise<BigNumber>;

  getFeeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  getPercentFee(overrides?: CallOverrides): Promise<BigNumber>;

  getPool(_poolId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<IAllo.PoolStructOutput>;

  getRegistry(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  getStrategy(_poolId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  getTreasury(overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  initialize(
    _registry: PromiseOrValue<string>,
    _treasury: PromiseOrValue<string>,
    _percentFee: PromiseOrValue<BigNumberish>,
    _baseFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isCloneableStrategy(_strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isPoolAdmin(
    _poolId: PromiseOrValue<BigNumberish>,
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isPoolManager(
    _poolId: PromiseOrValue<BigNumberish>,
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownershipHandoverExpiresAt(pendingOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  recoverFunds(
    _token: PromiseOrValue<string>,
    _recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  registerRecipient(
    _poolId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeFromCloneableStrategies(
    _strategy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removePoolManager(
    _poolId: PromiseOrValue<BigNumberish>,
    _manager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  requestOwnershipHandover(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateBaseFee(
    _baseFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updatePercentFee(
    _percentFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updatePoolMetadata(
    _poolId: PromiseOrValue<BigNumberish>,
    _metadata: MetadataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateRegistry(
    _registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateTreasury(
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    NATIVE(overrides?: CallOverrides): Promise<string>;

    addPoolManager(
      _poolId: PromiseOrValue<BigNumberish>,
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    addToCloneableStrategies(_strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    allocate(
      _poolId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    batchAllocate(
      _poolIds: PromiseOrValue<BigNumberish>[],
      _datas: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    batchRegisterRecipient(
      _poolIds: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides,
    ): Promise<string[]>;

    cancelOwnershipHandover(overrides?: CallOverrides): Promise<void>;

    completeOwnershipHandover(pendingOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    createPool(
      _profileId: PromiseOrValue<BytesLike>,
      _strategy: PromiseOrValue<string>,
      _initStrategyData: PromiseOrValue<BytesLike>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _metadata: MetadataStruct,
      _managers: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    createPoolWithCustomStrategy(
      _profileId: PromiseOrValue<BytesLike>,
      _strategy: PromiseOrValue<string>,
      _initStrategyData: PromiseOrValue<BytesLike>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _metadata: MetadataStruct,
      _managers: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    distribute(
      _poolId: PromiseOrValue<BigNumberish>,
      _recipientIds: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    fundPool(
      _poolId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getBaseFee(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    getPercentFee(overrides?: CallOverrides): Promise<BigNumber>;

    getPool(_poolId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<IAllo.PoolStructOutput>;

    getRegistry(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getStrategy(_poolId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    getTreasury(overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(
      _registry: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _percentFee: PromiseOrValue<BigNumberish>,
      _baseFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    isCloneableStrategy(_strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isPoolAdmin(
      _poolId: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isPoolManager(
      _poolId: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownershipHandoverExpiresAt(pendingOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    recoverFunds(
      _token: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    registerRecipient(
      _poolId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>;

    removeFromCloneableStrategies(_strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    removePoolManager(
      _poolId: PromiseOrValue<BigNumberish>,
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    requestOwnershipHandover(overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateBaseFee(_baseFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updatePercentFee(_percentFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updatePoolMetadata(
      _poolId: PromiseOrValue<BigNumberish>,
      _metadata: MetadataStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateRegistry(_registry: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BaseFeePaid(uint256,uint256)"(poolId?: PromiseOrValue<BigNumberish> | null, amount?: null): BaseFeePaidEventFilter;
    BaseFeePaid(poolId?: PromiseOrValue<BigNumberish> | null, amount?: null): BaseFeePaidEventFilter;

    "BaseFeeUpdated(uint256)"(baseFee?: null): BaseFeeUpdatedEventFilter;
    BaseFeeUpdated(baseFee?: null): BaseFeeUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipHandoverCanceled(address)"(
      pendingOwner?: PromiseOrValue<string> | null,
    ): OwnershipHandoverCanceledEventFilter;
    OwnershipHandoverCanceled(pendingOwner?: PromiseOrValue<string> | null): OwnershipHandoverCanceledEventFilter;

    "OwnershipHandoverRequested(address)"(
      pendingOwner?: PromiseOrValue<string> | null,
    ): OwnershipHandoverRequestedEventFilter;
    OwnershipHandoverRequested(pendingOwner?: PromiseOrValue<string> | null): OwnershipHandoverRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    "PercentFeeUpdated(uint256)"(percentFee?: null): PercentFeeUpdatedEventFilter;
    PercentFeeUpdated(percentFee?: null): PercentFeeUpdatedEventFilter;

    "PoolCreated(uint256,bytes32,address,address,uint256,tuple)"(
      poolId?: PromiseOrValue<BigNumberish> | null,
      profileId?: PromiseOrValue<BytesLike> | null,
      strategy?: null,
      token?: null,
      amount?: null,
      metadata?: null,
    ): PoolCreatedEventFilter;
    PoolCreated(
      poolId?: PromiseOrValue<BigNumberish> | null,
      profileId?: PromiseOrValue<BytesLike> | null,
      strategy?: null,
      token?: null,
      amount?: null,
      metadata?: null,
    ): PoolCreatedEventFilter;

    "PoolFunded(uint256,uint256,uint256)"(
      poolId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      fee?: null,
    ): PoolFundedEventFilter;
    PoolFunded(poolId?: PromiseOrValue<BigNumberish> | null, amount?: null, fee?: null): PoolFundedEventFilter;

    "PoolMetadataUpdated(uint256,tuple)"(
      poolId?: PromiseOrValue<BigNumberish> | null,
      metadata?: null,
    ): PoolMetadataUpdatedEventFilter;
    PoolMetadataUpdated(poolId?: PromiseOrValue<BigNumberish> | null, metadata?: null): PoolMetadataUpdatedEventFilter;

    "RegistryUpdated(address)"(registry?: null): RegistryUpdatedEventFilter;
    RegistryUpdated(registry?: null): RegistryUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;

    "StrategyApproved(address)"(strategy?: null): StrategyApprovedEventFilter;
    StrategyApproved(strategy?: null): StrategyApprovedEventFilter;

    "StrategyRemoved(address)"(strategy?: null): StrategyRemovedEventFilter;
    StrategyRemoved(strategy?: null): StrategyRemovedEventFilter;

    "TreasuryUpdated(address)"(treasury?: null): TreasuryUpdatedEventFilter;
    TreasuryUpdated(treasury?: null): TreasuryUpdatedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    NATIVE(overrides?: CallOverrides): Promise<BigNumber>;

    addPoolManager(
      _poolId: PromiseOrValue<BigNumberish>,
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addToCloneableStrategies(
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    allocate(
      _poolId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    batchAllocate(
      _poolIds: PromiseOrValue<BigNumberish>[],
      _datas: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    batchRegisterRecipient(
      _poolIds: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    cancelOwnershipHandover(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createPool(
      _profileId: PromiseOrValue<BytesLike>,
      _strategy: PromiseOrValue<string>,
      _initStrategyData: PromiseOrValue<BytesLike>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _metadata: MetadataStruct,
      _managers: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createPoolWithCustomStrategy(
      _profileId: PromiseOrValue<BytesLike>,
      _strategy: PromiseOrValue<string>,
      _initStrategyData: PromiseOrValue<BytesLike>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _metadata: MetadataStruct,
      _managers: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    distribute(
      _poolId: PromiseOrValue<BigNumberish>,
      _recipientIds: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    fundPool(
      _poolId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getBaseFee(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    getPercentFee(overrides?: CallOverrides): Promise<BigNumber>;

    getPool(_poolId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getStrategy(_poolId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      _registry: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _percentFee: PromiseOrValue<BigNumberish>,
      _baseFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isCloneableStrategy(_strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isPoolAdmin(
      _poolId: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isPoolManager(
      _poolId: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownershipHandoverExpiresAt(pendingOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    recoverFunds(
      _token: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    registerRecipient(
      _poolId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeFromCloneableStrategies(
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removePoolManager(
      _poolId: PromiseOrValue<BigNumberish>,
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    requestOwnershipHandover(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateBaseFee(
      _baseFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updatePercentFee(
      _percentFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updatePoolMetadata(
      _poolId: PromiseOrValue<BigNumberish>,
      _metadata: MetadataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateRegistry(
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NATIVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPoolManager(
      _poolId: PromiseOrValue<BigNumberish>,
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addToCloneableStrategies(
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    allocate(
      _poolId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    batchAllocate(
      _poolIds: PromiseOrValue<BigNumberish>[],
      _datas: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    batchRegisterRecipient(
      _poolIds: PromiseOrValue<BigNumberish>[],
      _data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    completeOwnershipHandover(
      pendingOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createPool(
      _profileId: PromiseOrValue<BytesLike>,
      _strategy: PromiseOrValue<string>,
      _initStrategyData: PromiseOrValue<BytesLike>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _metadata: MetadataStruct,
      _managers: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createPoolWithCustomStrategy(
      _profileId: PromiseOrValue<BytesLike>,
      _strategy: PromiseOrValue<string>,
      _initStrategyData: PromiseOrValue<BytesLike>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _metadata: MetadataStruct,
      _managers: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    distribute(
      _poolId: PromiseOrValue<BigNumberish>,
      _recipientIds: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    fundPool(
      _poolId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getBaseFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPercentFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPool(_poolId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStrategy(_poolId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      _registry: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _percentFee: PromiseOrValue<BigNumberish>,
      _baseFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isCloneableStrategy(_strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPoolAdmin(
      _poolId: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isPoolManager(
      _poolId: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownershipHandoverExpiresAt(
      pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    recoverFunds(
      _token: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    registerRecipient(
      _poolId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeFromCloneableStrategies(
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removePoolManager(
      _poolId: PromiseOrValue<BigNumberish>,
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateBaseFee(
      _baseFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updatePercentFee(
      _percentFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updatePoolMetadata(
      _poolId: PromiseOrValue<BigNumberish>,
      _metadata: MetadataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateRegistry(
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
