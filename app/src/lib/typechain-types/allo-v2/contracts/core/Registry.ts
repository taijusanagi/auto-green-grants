/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../../common";

export type MetadataStruct = {
  protocol: PromiseOrValue<BigNumberish>;
  pointer: PromiseOrValue<string>;
};

export type MetadataStructOutput = [BigNumber, string] & {
  protocol: BigNumber;
  pointer: string;
};

export declare namespace IRegistry {
  export type ProfileStruct = {
    id: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    metadata: MetadataStruct;
    owner: PromiseOrValue<string>;
    anchor: PromiseOrValue<string>;
  };

  export type ProfileStructOutput = [string, BigNumber, string, MetadataStructOutput, string, string] & {
    id: string;
    nonce: BigNumber;
    name: string;
    metadata: MetadataStructOutput;
    owner: string;
    anchor: string;
  };
}

export interface RegistryInterface extends utils.Interface {
  functions: {
    "ALLO_OWNER()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "NATIVE()": FunctionFragment;
    "acceptProfileOwnership(bytes32)": FunctionFragment;
    "addMembers(bytes32,address[])": FunctionFragment;
    "anchorToProfileId(address)": FunctionFragment;
    "createProfile(uint256,string,(uint256,string),address,address[])": FunctionFragment;
    "getProfileByAnchor(address)": FunctionFragment;
    "getProfileById(bytes32)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isMemberOfProfile(bytes32,address)": FunctionFragment;
    "isOwnerOfProfile(bytes32,address)": FunctionFragment;
    "isOwnerOrMemberOfProfile(bytes32,address)": FunctionFragment;
    "profileIdToPendingOwner(bytes32)": FunctionFragment;
    "profilesById(bytes32)": FunctionFragment;
    "recoverFunds(address,address)": FunctionFragment;
    "removeMembers(bytes32,address[])": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateProfileMetadata(bytes32,(uint256,string))": FunctionFragment;
    "updateProfileName(bytes32,string)": FunctionFragment;
    "updateProfilePendingOwner(bytes32,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ALLO_OWNER"
      | "DEFAULT_ADMIN_ROLE"
      | "NATIVE"
      | "acceptProfileOwnership"
      | "addMembers"
      | "anchorToProfileId"
      | "createProfile"
      | "getProfileByAnchor"
      | "getProfileById"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "isMemberOfProfile"
      | "isOwnerOfProfile"
      | "isOwnerOrMemberOfProfile"
      | "profileIdToPendingOwner"
      | "profilesById"
      | "recoverFunds"
      | "removeMembers"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "updateProfileMetadata"
      | "updateProfileName"
      | "updateProfilePendingOwner",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ALLO_OWNER", values?: undefined): string;
  encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "NATIVE", values?: undefined): string;
  encodeFunctionData(functionFragment: "acceptProfileOwnership", values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: "addMembers",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(functionFragment: "anchorToProfileId", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "createProfile",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      MetadataStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
    ],
  ): string;
  encodeFunctionData(functionFragment: "getProfileByAnchor", values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: "getProfileById", values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "hasRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: "isMemberOfProfile",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "isOwnerOfProfile",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "isOwnerOrMemberOfProfile",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "profileIdToPendingOwner", values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: "profilesById", values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: "recoverFunds",
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "removeMembers",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: "updateProfileMetadata",
    values: [PromiseOrValue<BytesLike>, MetadataStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "updateProfileName",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "updateProfilePendingOwner",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: "ALLO_OWNER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NATIVE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "acceptProfileOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addMembers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "anchorToProfileId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createProfile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProfileByAnchor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProfileById", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMemberOfProfile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwnerOfProfile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwnerOrMemberOfProfile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "profileIdToPendingOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "profilesById", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recoverFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeMembers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateProfileMetadata", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateProfileName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateProfilePendingOwner", data: BytesLike): Result;

  events: {
    "ProfileCreated(bytes32,uint256,string,tuple,address,address)": EventFragment;
    "ProfileMetadataUpdated(bytes32,tuple)": EventFragment;
    "ProfileNameUpdated(bytes32,string,address)": EventFragment;
    "ProfileOwnerUpdated(bytes32,address)": EventFragment;
    "ProfilePendingOwnerUpdated(bytes32,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProfileCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfileMetadataUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfileNameUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfileOwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfilePendingOwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface ProfileCreatedEventObject {
  profileId: string;
  nonce: BigNumber;
  name: string;
  metadata: MetadataStructOutput;
  owner: string;
  anchor: string;
}
export type ProfileCreatedEvent = TypedEvent<
  [string, BigNumber, string, MetadataStructOutput, string, string],
  ProfileCreatedEventObject
>;

export type ProfileCreatedEventFilter = TypedEventFilter<ProfileCreatedEvent>;

export interface ProfileMetadataUpdatedEventObject {
  profileId: string;
  metadata: MetadataStructOutput;
}
export type ProfileMetadataUpdatedEvent = TypedEvent<[string, MetadataStructOutput], ProfileMetadataUpdatedEventObject>;

export type ProfileMetadataUpdatedEventFilter = TypedEventFilter<ProfileMetadataUpdatedEvent>;

export interface ProfileNameUpdatedEventObject {
  profileId: string;
  name: string;
  anchor: string;
}
export type ProfileNameUpdatedEvent = TypedEvent<[string, string, string], ProfileNameUpdatedEventObject>;

export type ProfileNameUpdatedEventFilter = TypedEventFilter<ProfileNameUpdatedEvent>;

export interface ProfileOwnerUpdatedEventObject {
  profileId: string;
  owner: string;
}
export type ProfileOwnerUpdatedEvent = TypedEvent<[string, string], ProfileOwnerUpdatedEventObject>;

export type ProfileOwnerUpdatedEventFilter = TypedEventFilter<ProfileOwnerUpdatedEvent>;

export interface ProfilePendingOwnerUpdatedEventObject {
  profileId: string;
  pendingOwner: string;
}
export type ProfilePendingOwnerUpdatedEvent = TypedEvent<[string, string], ProfilePendingOwnerUpdatedEventObject>;

export type ProfilePendingOwnerUpdatedEventFilter = TypedEventFilter<ProfilePendingOwnerUpdatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface Registry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ALLO_OWNER(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    NATIVE(overrides?: CallOverrides): Promise<[string]>;

    acceptProfileOwnership(
      _profileId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addMembers(
      _profileId: PromiseOrValue<BytesLike>,
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    anchorToProfileId(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    createProfile(
      _nonce: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _metadata: MetadataStruct,
      _owner: PromiseOrValue<string>,
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getProfileByAnchor(
      _anchor: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[IRegistry.ProfileStructOutput]>;

    getProfileById(
      _profileId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[IRegistry.ProfileStructOutput]>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isMemberOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isOwnerOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isOwnerOrMemberOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    profileIdToPendingOwner(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    profilesById(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, string, MetadataStructOutput, string, string] & {
        id: string;
        nonce: BigNumber;
        name: string;
        metadata: MetadataStructOutput;
        owner: string;
        anchor: string;
      }
    >;

    recoverFunds(
      _token: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeMembers(
      _profileId: PromiseOrValue<BytesLike>,
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    updateProfileMetadata(
      _profileId: PromiseOrValue<BytesLike>,
      _metadata: MetadataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateProfileName(
      _profileId: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateProfilePendingOwner(
      _profileId: PromiseOrValue<BytesLike>,
      _pendingOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  ALLO_OWNER(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  NATIVE(overrides?: CallOverrides): Promise<string>;

  acceptProfileOwnership(
    _profileId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addMembers(
    _profileId: PromiseOrValue<BytesLike>,
    _members: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  anchorToProfileId(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  createProfile(
    _nonce: PromiseOrValue<BigNumberish>,
    _name: PromiseOrValue<string>,
    _metadata: MetadataStruct,
    _owner: PromiseOrValue<string>,
    _members: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getProfileByAnchor(
    _anchor: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<IRegistry.ProfileStructOutput>;

  getProfileById(
    _profileId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<IRegistry.ProfileStructOutput>;

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isMemberOfProfile(
    _profileId: PromiseOrValue<BytesLike>,
    _member: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isOwnerOfProfile(
    _profileId: PromiseOrValue<BytesLike>,
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isOwnerOrMemberOfProfile(
    _profileId: PromiseOrValue<BytesLike>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  profileIdToPendingOwner(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  profilesById(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, string, MetadataStructOutput, string, string] & {
      id: string;
      nonce: BigNumber;
      name: string;
      metadata: MetadataStructOutput;
      owner: string;
      anchor: string;
    }
  >;

  recoverFunds(
    _token: PromiseOrValue<string>,
    _recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeMembers(
    _profileId: PromiseOrValue<BytesLike>,
    _members: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  updateProfileMetadata(
    _profileId: PromiseOrValue<BytesLike>,
    _metadata: MetadataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateProfileName(
    _profileId: PromiseOrValue<BytesLike>,
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateProfilePendingOwner(
    _profileId: PromiseOrValue<BytesLike>,
    _pendingOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    ALLO_OWNER(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    NATIVE(overrides?: CallOverrides): Promise<string>;

    acceptProfileOwnership(_profileId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    addMembers(
      _profileId: PromiseOrValue<BytesLike>,
      _members: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    anchorToProfileId(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    createProfile(
      _nonce: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _metadata: MetadataStruct,
      _owner: PromiseOrValue<string>,
      _members: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<string>;

    getProfileByAnchor(
      _anchor: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<IRegistry.ProfileStructOutput>;

    getProfileById(
      _profileId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<IRegistry.ProfileStructOutput>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isMemberOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isOwnerOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isOwnerOrMemberOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    profileIdToPendingOwner(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    profilesById(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, string, MetadataStructOutput, string, string] & {
        id: string;
        nonce: BigNumber;
        name: string;
        metadata: MetadataStructOutput;
        owner: string;
        anchor: string;
      }
    >;

    recoverFunds(
      _token: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    removeMembers(
      _profileId: PromiseOrValue<BytesLike>,
      _members: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    updateProfileMetadata(
      _profileId: PromiseOrValue<BytesLike>,
      _metadata: MetadataStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateProfileName(
      _profileId: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;

    updateProfilePendingOwner(
      _profileId: PromiseOrValue<BytesLike>,
      _pendingOwner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    "ProfileCreated(bytes32,uint256,string,tuple,address,address)"(
      profileId?: PromiseOrValue<BytesLike> | null,
      nonce?: null,
      name?: null,
      metadata?: null,
      owner?: null,
      anchor?: null,
    ): ProfileCreatedEventFilter;
    ProfileCreated(
      profileId?: PromiseOrValue<BytesLike> | null,
      nonce?: null,
      name?: null,
      metadata?: null,
      owner?: null,
      anchor?: null,
    ): ProfileCreatedEventFilter;

    "ProfileMetadataUpdated(bytes32,tuple)"(
      profileId?: PromiseOrValue<BytesLike> | null,
      metadata?: null,
    ): ProfileMetadataUpdatedEventFilter;
    ProfileMetadataUpdated(
      profileId?: PromiseOrValue<BytesLike> | null,
      metadata?: null,
    ): ProfileMetadataUpdatedEventFilter;

    "ProfileNameUpdated(bytes32,string,address)"(
      profileId?: PromiseOrValue<BytesLike> | null,
      name?: null,
      anchor?: null,
    ): ProfileNameUpdatedEventFilter;
    ProfileNameUpdated(
      profileId?: PromiseOrValue<BytesLike> | null,
      name?: null,
      anchor?: null,
    ): ProfileNameUpdatedEventFilter;

    "ProfileOwnerUpdated(bytes32,address)"(
      profileId?: PromiseOrValue<BytesLike> | null,
      owner?: null,
    ): ProfileOwnerUpdatedEventFilter;
    ProfileOwnerUpdated(profileId?: PromiseOrValue<BytesLike> | null, owner?: null): ProfileOwnerUpdatedEventFilter;

    "ProfilePendingOwnerUpdated(bytes32,address)"(
      profileId?: PromiseOrValue<BytesLike> | null,
      pendingOwner?: null,
    ): ProfilePendingOwnerUpdatedEventFilter;
    ProfilePendingOwnerUpdated(
      profileId?: PromiseOrValue<BytesLike> | null,
      pendingOwner?: null,
    ): ProfilePendingOwnerUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    ALLO_OWNER(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    NATIVE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptProfileOwnership(
      _profileId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addMembers(
      _profileId: PromiseOrValue<BytesLike>,
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    anchorToProfileId(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    createProfile(
      _nonce: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _metadata: MetadataStruct,
      _owner: PromiseOrValue<string>,
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getProfileByAnchor(_anchor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getProfileById(_profileId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isMemberOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isOwnerOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isOwnerOrMemberOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    profileIdToPendingOwner(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    profilesById(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    recoverFunds(
      _token: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeMembers(
      _profileId: PromiseOrValue<BytesLike>,
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    updateProfileMetadata(
      _profileId: PromiseOrValue<BytesLike>,
      _metadata: MetadataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateProfileName(
      _profileId: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateProfilePendingOwner(
      _profileId: PromiseOrValue<BytesLike>,
      _pendingOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ALLO_OWNER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NATIVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptProfileOwnership(
      _profileId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addMembers(
      _profileId: PromiseOrValue<BytesLike>,
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    anchorToProfileId(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createProfile(
      _nonce: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _metadata: MetadataStruct,
      _owner: PromiseOrValue<string>,
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getProfileByAnchor(_anchor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProfileById(_profileId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isMemberOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _member: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isOwnerOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isOwnerOrMemberOfProfile(
      _profileId: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    profileIdToPendingOwner(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profilesById(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverFunds(
      _token: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeMembers(
      _profileId: PromiseOrValue<BytesLike>,
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateProfileMetadata(
      _profileId: PromiseOrValue<BytesLike>,
      _metadata: MetadataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateProfileName(
      _profileId: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateProfilePendingOwner(
      _profileId: PromiseOrValue<BytesLike>,
      _pendingOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
