/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type { CREATE3, CREATE3Interface } from "../../../../solady/src/utils/CREATE3";

const _abi = [
  {
    inputs: [],
    name: "DeploymentFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "InitializationFailed",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a8e67d04e14e2e00966bac8a0052e09f38b3f9673e4393aa847aae11e18f76b764736f6c63430008130033";

type CREATE3ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: CREATE3ConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class CREATE3__factory extends ContractFactory {
  constructor(...args: CREATE3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<CREATE3> {
    return super.deploy(overrides || {}) as Promise<CREATE3>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CREATE3 {
    return super.attach(address) as CREATE3;
  }
  override connect(signer: Signer): CREATE3__factory {
    return super.connect(signer) as CREATE3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CREATE3Interface {
    return new utils.Interface(_abi) as CREATE3Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): CREATE3 {
    return new Contract(address, _abi, signerOrProvider) as CREATE3;
  }
}
