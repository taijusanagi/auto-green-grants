/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Anchor,
  AnchorInterface,
} from "../../../../allo-v2/contracts/core/Anchor";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_profileId",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CALL_FAILED",
    type: "error",
  },
  {
    inputs: [],
    name: "UNAUTHORIZED",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "profileId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "contract Registry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161090b38038061090b833981810160405281019061003291906100af565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508060a08181525050506100dc565b600080fd5b6000819050919050565b61008c81610079565b811461009757600080fd5b50565b6000815190506100a981610083565b92915050565b6000602082840312156100c5576100c4610074565b5b60006100d38482850161009a565b91505092915050565b60805160a0516107fe61010d6000396000818160d9015261015f01526000818160fd015261012301526107fe6000f3fe6080604052600436106100385760003560e01c806308386eba146100445780637b1039991461006f578063b61d27f61461009a5761003f565b3661003f57005b600080fd5b34801561005057600080fd5b506100596100d7565b6040516100669190610345565b60405180910390f35b34801561007b57600080fd5b506100846100fb565b60405161009191906103df565b60405180910390f35b3480156100a657600080fd5b506100c160048036038101906100bc91906105c8565b61011f565b6040516100ce91906106b6565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166339b86b8c7f0000000000000000000000000000000000000000000000000000000000000000336040518363ffffffff1660e01b815260040161019c9291906106e7565b602060405180830381865afa1580156101b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101dd9190610748565b610213576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610279576040517f84aed38d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1685856040516102a291906107b1565b60006040518083038185875af1925050503d80600081146102df576040519150601f19603f3d011682016040523d82523d6000602084013e6102e4565b606091505b509150915081610320576040517f84aed38d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80925050509392505050565b6000819050919050565b61033f8161032c565b82525050565b600060208201905061035a6000830184610336565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006103a56103a061039b84610360565b610380565b610360565b9050919050565b60006103b78261038a565b9050919050565b60006103c9826103ac565b9050919050565b6103d9816103be565b82525050565b60006020820190506103f460008301846103d0565b92915050565b6000604051905090565b600080fd5b600080fd5b600061041982610360565b9050919050565b6104298161040e565b811461043457600080fd5b50565b60008135905061044681610420565b92915050565b6000819050919050565b61045f8161044c565b811461046a57600080fd5b50565b60008135905061047c81610456565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104d58261048c565b810181811067ffffffffffffffff821117156104f4576104f361049d565b5b80604052505050565b60006105076103fa565b905061051382826104cc565b919050565b600067ffffffffffffffff8211156105335761053261049d565b5b61053c8261048c565b9050602081019050919050565b82818337600083830152505050565b600061056b61056684610518565b6104fd565b90508281526020810184848401111561058757610586610487565b5b610592848285610549565b509392505050565b600082601f8301126105af576105ae610482565b5b81356105bf848260208601610558565b91505092915050565b6000806000606084860312156105e1576105e0610404565b5b60006105ef86828701610437565b93505060206106008682870161046d565b925050604084013567ffffffffffffffff81111561062157610620610409565b5b61062d8682870161059a565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015610671578082015181840152602081019050610656565b60008484015250505050565b600061068882610637565b6106928185610642565b93506106a2818560208601610653565b6106ab8161048c565b840191505092915050565b600060208201905081810360008301526106d0818461067d565b905092915050565b6106e18161040e565b82525050565b60006040820190506106fc6000830185610336565b61070960208301846106d8565b9392505050565b60008115159050919050565b61072581610710565b811461073057600080fd5b50565b6000815190506107428161071c565b92915050565b60006020828403121561075e5761075d610404565b5b600061076c84828501610733565b91505092915050565b600081905092915050565b600061078b82610637565b6107958185610775565b93506107a5818560208601610653565b80840191505092915050565b60006107bd8284610780565b91508190509291505056fea2646970667358221220fe04cc64ccc881c6a6011a8bc5c0056426333a6eb4a232630764e9f7a0042ac964736f6c63430008130033";

type AnchorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AnchorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Anchor__factory extends ContractFactory {
  constructor(...args: AnchorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _profileId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Anchor> {
    return super.deploy(_profileId, overrides || {}) as Promise<Anchor>;
  }
  override getDeployTransaction(
    _profileId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_profileId, overrides || {});
  }
  override attach(address: string): Anchor {
    return super.attach(address) as Anchor;
  }
  override connect(signer: Signer): Anchor__factory {
    return super.connect(signer) as Anchor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnchorInterface {
    return new utils.Interface(_abi) as AnchorInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Anchor {
    return new Contract(address, _abi, signerOrProvider) as Anchor;
  }
}
